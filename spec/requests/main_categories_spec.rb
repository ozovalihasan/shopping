  require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

# frozen_string_literal: true

# class MockComponent < ViewComponent::Base
#   def initialize(name)
#     @name = name
#   end

#   def call
#     @name
#   end
# end

RSpec.describe "/main_categories", type: :request do

  before(:all) {
    FactoryBot.reload
    FactoryBot.create(:mock_main_category)
    FactoryBot.create_list(:mock_category, 1)
    FactoryBot.create(:mock_seller)
    FactoryBot.create(:mock_product)
  }
  

  describe "GET /index" do
    it "renders a successful response" do
      get main_categories_url

      expect(response.body).to include("turbo-frame")
      expect(response.body).to include("product_name_1")
      expect(response.body).to include("main_category_name_1")
      expect(response).to have_http_status(:ok)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      
      allow_any_instance_of(ViewComponent::Base).to receive(:render).and_return("one of unimportant mock components")
      allow(Categories::CategoryComponent).to receive(:with_collection) { MockComponent.new( Categories::CategoryComponent ) }
      allow(Products::IndexComponent).to receive(:new) { MockComponent.new( Products::IndexComponent ) }
      
      get main_category_url(MainCategory.first)

      expect(response.body).to include("turbo-frame")
      expect(response.body).to include( Products::IndexComponent.name )
      expect(response.body).to include( Categories::CategoryComponent.name )
      expect(response.body).to include("one of unimportant mock components").exactly(4).times
      
      # expect(response).to render_template(:show)
      
    end
  end
end
