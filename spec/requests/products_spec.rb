require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do
  
  let(:frame_id) { main_parts_target }

  before(:each) {
    FactoryBot.reload
    FactoryBot.create(:mock_main_category)
    FactoryBot.create_list(:mock_category, 1)
    FactoryBot.create(:mock_seller)
    FactoryBot.create(:mock_product)
  }

  describe "GET /index" do
    it "renders a successful response for the html format"  do
      get products_path

      expect(response).to render_template(:index)
      expect(response).to have_http_status(:ok)

      expect(response.body).to match_snapshot('products/index/html')
    end
  
    it "renders only a frame for a request of turbo frame" do
      get products_path, headers: { "Turbo-Frame" => frame_id }
      
      expect(response).to render_template(layout: false)
      expect(response).to have_http_status(:ok)
      expect(response.body).to have_css("turbo-frame##{frame_id}")

      expect(response.body).to match_snapshot('products/index/turbo_frame')
    end

    it "replaces some elements for a turbo stream request" do
      FactoryBot.create_list(:mock_product, 20)

      get products_path(format: :turbo_stream, params: {search_term: "product", page: 2})
      
      expect(response).to render_template(layout: false)
      expect(response).to have_http_status(:ok)
      expect(response.body).to have_css("turbo-stream[target='products'][action='append']")

      expect(response.body).to match_snapshot('products/index/turbo_stream')
    end  
    
  end

  describe "GET /show" do
    it "renders a successful response for the html format"  do
      get product_path(Product.first)

      expect(response).to render_template(:show)
      expect(response).to have_http_status(:ok)

      expect(response.body).to match_snapshot('products/show/html')
    end
  
    it "renders only a frame for a request of turbo frame" do
      get product_path((Product.first)), headers: { "Turbo-Frame" => frame_id }
      
      expect(response).to render_template(layout: false)
      expect(response).to have_http_status(:ok)
      expect(response.body).to have_css("turbo-frame##{frame_id}")

      expect(response.body).to match_snapshot('products/show/turbo_frame')
    end
    
  end

  
end
